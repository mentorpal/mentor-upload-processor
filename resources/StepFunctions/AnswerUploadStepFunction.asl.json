{
  "StartAt": "IsTrimRequired",
  "States": {
    "IsTrimRequired": {
      "Type": "Choice",
      "Comment": "Check if trimming is requested",
      "Choices": [
        {
          "Variable": "$.request.trim",
          "IsPresent": true,
          "Next": "TrimUpload"
        }
      ],
      "Default": "TriggerProcessing"
    },
    "TrimUpload": {
      "Type": "Task",
      "Comment": "Trim video and re-upload to S3",
      "Resource": "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-step_trim",
      "Parameters": {
        "request.$": "$.request"
      },
      "ResultPath": null,
      "Next": "TriggerProcessing",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ErrorHandler"
        }
      ]
    },
    "TriggerProcessing": {
      "Type": "Parallel",
      "Next": "Finish",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ErrorHandler"
        }
      ],
      "Parameters": {
        "request.$": "$.request"
      },
      "ResultPath": null,
      "Branches": [
        {
          "StartAt": "Transcode Web",
          "States": {
            "Transcode Web": {
              "Type": "Task",
              "End": true,
              "Comment": "Transcode video to web format",
              "Resource": "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-step_trim",
              "Parameters": {
                "request.$": "$.request"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        },
        {
          "StartAt": "Transcode Mobile",
          "States": {
            "Transcode Mobile": {
              "Type": "Task",
              "End": true,
              "Comment": "Transcode video to mobile format",
              "Resource": "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-step_trim",
              "Parameters": {
                "request.$": "$.request"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        },
        {
          "StartAt": "Transcribe",
          "States": {
            "Transcribe": {
              "Type": "Task",
              "End": true,
              "Comment": "Transcribe video",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-step_transcribe_start",
                "Payload": {
                  "request.$": "$.request",
                  "task_token.$": "$$.Task.Token"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        }
      ]
    },
    "ErrorHandler": {
      "Type": "Parallel",
      "Next": "Finish",
      "Parameters": {
        "request.$": "$.request",
        "error.$": "$.Error",
        "cause.$": "$.Cause"
      },
      "Branches": [
        {
          "StartAt": "Mark as failed",
          "States": {
            "Mark as failed": {
              "Type": "Task",
              "End": true,
              "Comment": "Mark video upload in graphql as failed",
              "Resource": "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-step_trim",
              "Parameters": {
                "request.$": "$.request",
                "error.$": "$.Error",
                "cause.$": "$.Cause"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        },
        {
          "StartAt": "Send to DLQ",
          "States": {
            "Send to DLQ": {
              "Type": "Task",
              "End": true,
              "Comment": "Send a message to the DLQ for alerting",
              "Resource": "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-step_trim",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 6,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        }
      ]
    },
    "Finish": {
      "Type": "Pass",
      "End": true
    }
  }
}