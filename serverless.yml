##
## This software is Copyright ©️ 2020 The University of Southern California. All Rights Reserved. 
## Permission to use, copy, modify, and distribute this software and its documentation for educational, research and non-profit purposes, without fee, and without a written agreement is hereby granted, provided that the above copyright notice and subject to the full license file found in the root of this software deliverable. Permission to make commercial use of this software may be obtained by contacting:  USC Stevens Center for Innovation University of Southern California 1150 S. Olive Street, Suite 2300, Los Angeles, CA 90115, USA Email: accounting@stevens.usc.edu
##
## The full terms of this copyright and license should always be found in the root directory of this software deliverable as "license.txt" and if these terms are not found with this software, please contact the USC Stevens Center for the full license.
##

service: mentorpal-upload-sm

# pin to only deploy with a specific Serverless version
frameworkVersion: '2'
variablesResolutionMode: 20210326

plugins:
  - serverless-deployment-bucket
  - serverless-offline
  - serverless-layers
custom:
  stages:
    offline:
      LOG_LEVEL: 'trace'
      S3_STATIC_ARN: arn:aws:s3:::static-mentorpal-offline-origin
      GRAPHQL_ENDPOINT: 'http://127.0.0.1:3001/graphql'
      IS_SENTRY_ENABLED: false
    dev:
      LOG_LEVEL: 'trace'
      IS_SENTRY_ENABLED: false
      # v2 is hardcoded, we could use fallback stages instead
      S3_STATIC_ARN: ${ssm:/mentorpal/v2/s3_static_arn}
      GRAPHQL_ENDPOINT: 'https://v2.mentorpal.org/graphql'
      API_SECRET: '${ssm:/mentorpal/v2/shared/api_secret}'
      TRANSCRIBE_AWS_S3_BUCKET_SOURCE: mentorpal-v2-mentorpal-transcribe-uploads
      TRANSCRIBE_AWS_SECRET_ACCESS_KEY: ${ssm:/mentorpal/v2/transcribe/secret_key}
      TRANSCRIBE_AWS_ACCESS_KEY_ID: ${ssm:/mentorpal/v2/transcribe/access_key}
      ALERT_SNS_ARN: ${ssm:/mentorpal/v2/shared/sns_alert_topic_arn}
    qa:
      # TODO
      # S3_STATIC_ARN: ${ssm:/mentorpal/${self:provider.stage}/s3_static_arn}
      LOG_LEVEL: 'debug'
      IS_SENTRY_ENABLED: true
      GRAPHQL_ENDPOINT: 'https://v2.mentorpal.org/graphql'
      API_SECRET: '${ssm:/mentorpal/v2/shared/api_secret}'
      TRANSCRIBE_AWS_S3_BUCKET_SOURCE: mentorpal-v2-mentorpal-transcribe-uploads
      TRANSCRIBE_AWS_SECRET_ACCESS_KEY: ${ssm:/mentorpal/v2/transcribe/access_key}
      TRANSCRIBE_AWS_ACCESS_KEY_ID: ${ssm:/mentorpal/v2/transcribe/secret_key}
      ALERT_SNS_ARN: ${ssm:/mentorpal/v2/shared/sns_alert_topic_arn}
    prod:
      LOG_LEVEL: 'info'
      IS_SENTRY_ENABLED: true
      GRAPHQL_ENDPOINT: 'https://careerfair.mentorpal.org/graphql'
      # API_SECRET: '${ssm:/mentorpal/careerfair/shared/api_secret}'
      # TODO
      # S3_STATIC_ARN: ${ssm:/mentorpal/${self:provider.stage}/s3_static_arn}
      # ALERT_SNS_ARN: ${ssm:/mentorpal/careerfair/shared/sns_alert_topic_arn}

  # serverless-layers requires a deployment bucket to be created before deploying this stack
  serverless-layers:
    - dependencies:
        layersDeploymentBucket: ${self:provider.deploymentBucket.name}
        dependenciesPath: ./requirements.txt
        compatibleRuntimes:
          - python3.7
          - python3.8
        # applies to all lambdas

  # serverless-offline:
  #   useDocker: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'} # stage is dev unless otherwise specified with --stage flag
  deploymentBucket:
    name: '${self:service}-sls-deploy-${self:provider.stage}'
    blockPublicAccess: true
    serverSideEncryption: AES256
    versioning: false
  stackTags:
    ENVIRONMENT: ${self:provider.stage}
    PROJECT: ${self:service}-${self:provider.stage}
    REPOSITORY: mentor-upload
  runtime: python3.8
  lambdaHashingVersion: 20201221
  tracing:
    lambda: true
  logRetentionInDays: 30      
  region: us-east-1
  architecture: x86_64 # because of the static ffmpeg binaries and python dependencies
  environment:
    # IS_OFFLINE: ${env:IS_OFFLINE}
    STAGE: ${self:provider.stage}
    PYTHON_ENV: careerfair-${self:provider.stage}
    S3_STATIC_ARN: ${self:custom.stages.${self:provider.stage}.S3_STATIC_ARN}
    FFMPEG_EXECUTABLE: /opt/ffmpeg/ffmpeg
    GRAPHQL_ENDPOINT: ${self:custom.stages.${self:provider.stage}.GRAPHQL_ENDPOINT}
    API_SECRET: ${self:custom.stages.${self:provider.stage}.API_SECRET}
    IS_SENTRY_ENABLED: ${self:custom.stages.${self:provider.stage}.IS_SENTRY_ENABLED}
    SENTRY_DSN_MENTOR_UPLOAD: '${ssm:/mentorpal/upload/sentry_dsn}'

  # iam permissions for all lambda functions
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - "/"
              - - ${self:custom.stages.${self:provider.stage}.S3_STATIC_ARN}
                - "*"

package:
#  individually: false
 patterns:
    # exclude everything:
     - '!./**'
    # and then add back in only the files we need:
     - '*.py'

layers:
  # binaries are shared and this will make lambdas size smaller
  binaries:
    path: ./binaries
    package:
      patterns:
        - '!./**'
        # relative to layer path:
        # when attached, these are available under /opt
        - ./ffmpeg/ffmpeg
        - './MediaInfo_DLL_21.09_Lambda/lib/**'
    name: binaries-layer-${self:provider.stage}
    description: Bundles ffmpeg and mediainfo binaries/libs
    compatibleArchitectures: # optional, a list of architectures this layer is compatible with
      - x86_64
    licenseInfo: GPLv3 # optional, a string specifying license information
    retain: false # If true, layer versions are not deleted as new ones are created

functions:
  answer-transcode-web:
    handler: answer-transcode-web.handler
    memorySize: 8192 # 5min video takes 100sec with 2GB, 50sec with 4GB, 30sec with 8GB
    timeout: 300
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TranscodeWebQueue, Arn]
          batchSize: 1
    layers:
      # binaries gets named "Binaries"+"LambdaLayer":
      # see https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
      - { Ref: BinariesLambdaLayer }

  answer-transcode-mobile:
    handler: answer-transcode-mobile.handler
    memorySize: 8192 # 5min video takes 100sec with 2GB, 50sec with 4GB, 30sec with 8GB
    timeout: 300
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TranscodeMobileQueue, Arn]
          batchSize: 1            
    layers:
      # binaries gets named "Binaries"+"LambdaLayer":
      # see https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
      - { Ref: BinariesLambdaLayer }

  answer-transcribe:
    handler: answer-transcribe.handler
    memorySize: 2048 # need to extract audio
    timeout: 300
    environment:
      TRANSCRIBE_MODULE_PATH: transcribe_aws
      TRANSCRIBE_AWS_REGION: ${self:provider.region}
      TRANSCRIBE_AWS_S3_BUCKET_SOURCE: ${self:custom.stages.${self:provider.stage}.TRANSCRIBE_AWS_S3_BUCKET_SOURCE}
      # sensitive data, better to just add it to lambdas that really need it:
      TRANSCRIBE_AWS_SECRET_ACCESS_KEY: ${self:custom.stages.${self:provider.stage}.TRANSCRIBE_AWS_SECRET_ACCESS_KEY}
      TRANSCRIBE_AWS_ACCESS_KEY_ID: ${self:custom.stages.${self:provider.stage}.TRANSCRIBE_AWS_ACCESS_KEY_ID}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TranscribeQueue, Arn]
          batchSize: 1
    layers:
      # binaries gets named "Binaries"+"LambdaLayer":
      # see https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
      - { Ref: BinariesLambdaLayer }

resources:
  Conditions:
    CreateCloudWatchAlarm:
      Fn::Or:
        - Fn::Equals: ['${self:provider.stage}', 'qa']
        - Fn::Equals: ['${self:provider.stage}', 'prod']
  Resources:
    TranscodeWebDLQ:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 30
        QueueName: upload-transcode-web-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # max 14 days, default is 4 days
    
    TranscodeMobileDLQ:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 30
        QueueName: upload-transcode-mobile-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # max 14 days, default is 4 days

    TranscribeDLQ:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 30
        QueueName: upload-transcribe-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # max 14 days, default is 4 days

    TranscodeWebQueue:
      Type: AWS::SQS::Queue
      Properties:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
        QueueName: upload-trancode-web-queue-${self:provider.stage}
        VisibilityTimeout: 600 # default too low, we need to give lambdas time to finish processing
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TranscodeWebDLQ, Arn]
          maxReceiveCount: 1 # try once and then move to DLQ
    
    TranscodeMobileQueue:
      Type: AWS::SQS::Queue
      Properties:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
        QueueName: upload-trancode-mobile-queue-${self:provider.stage}
        VisibilityTimeout: 600 # default too low, we need to give lambdas time to finish processing
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TranscodeMobileDLQ, Arn]
          maxReceiveCount: 1 # try once then move to DLQ
    
    TranscribeQueue:
      Type: AWS::SQS::Queue
      Properties:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
        QueueName: upload-transcribe-queue-${self:provider.stage}
        VisibilityTimeout: 300 # default 30sec too low, we need to give lambdas time to finish processing
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TranscribeDLQ, Arn]
          maxReceiveCount: 1 # try once and then move to DLQ

    ProcessUploadSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: 'mentor-upload-process-topic-${self:provider.stage}'
        Subscription:
          - Protocol: sqs
            Endpoint: 
              Fn::GetAtt: [TranscodeWebQueue, Arn]
          - Protocol: sqs
            Endpoint: 
              Fn::GetAtt: [TranscodeMobileQueue, Arn]
          - Protocol: sqs
            Endpoint: 
              Fn::GetAtt: [TranscribeQueue, Arn]

    SnsToSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "Allow SNS publish to SQS"
              Effect: Allow
              Principal: 
                Service: "sns.amazonaws.com"
              Resource:
                - Fn::GetAtt: [TranscodeWebQueue, Arn]
                - Fn::GetAtt: [TranscodeMobileQueue, Arn]
                - Fn::GetAtt: [TranscribeQueue, Arn]
              Action: SQS:SendMessage
              Condition:
                ArnEquals:
                  aws:SourceArn: 
                    # return value is ARN, so no need for Fn::GetAtt
                    Ref: ProcessUploadSnsTopic
        Queues:
          - Ref: TranscodeWebQueue
          - Ref: TranscodeMobileQueue
          - Ref: TranscribeQueue

    ProcessUploadSnsTopicArn:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /mentorpal/${self:provider.stage}/shared/upload_sns_arn
        Type: String
        Value: 
          Ref: ProcessUploadSnsTopic

    Alarm:
      Type: AWS::CloudWatch::Alarm
      Condition: CreateCloudWatchAlarm
      Properties:
        ActionsEnabled: true
        AlarmName: 'Number of failed upload jobs ${self:resources.Resources.TranscodeWebDLQ.Properties.QueueName}'
        AlarmDescription: 'Number of failed upload jobs greater than zero'
        Namespace: 'AWS/SQS'
        Statistic: 'Sum'
        MetricName: 'ApproximateNumberOfMessagesVisible'
        ComparisonOperator: 'GreaterThanThreshold'
        EvaluationPeriods: 1
        Period: 300 # 5 minutes in seconds
        Threshold: 0
        TreatMissingData: 'notBreaching'
        Dimensions:
          - Name: QueueName
            Value: ${self:resources.Resources.TranscodeWebDLQ.Properties.QueueName}
        AlarmActions:
          - ${self:custom.stages.${self:provider.stage}.ALERT_SNS_ARN}
        OKActions:
          - ${self:custom.stages.${self:provider.stage}.ALERT_SNS_ARN}

  Outputs:
    ProcessUploadSnsTopicName:
      Description: SNS topic name
      Value: 
        Fn::GetAtt: [ProcessUploadSnsTopic, TopicName]
    ProcessUploadSnsTopicArn:
      Description: SNS topic ARN
      Value: 
        Ref: ProcessUploadSnsTopic
